@model EPPlus.WebSampleMvc.NetCore.Models.HtmlExport.ExportRange8Model
<style type="text/css">
    @Html.Raw(Model.Css)
    button.plain { background:none; border: thin solid 1pt; width: 100%; border-bottom: thin; border-color:black; text-align:left;}
    button:hover { background-color:cornflowerblue;}
    button:focus { background-color:deepskyblue;}
</style>
<div class="row">
    <div class="col">
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="/">Home</a></li>
                <li class="breadcrumb-item"><a href="/HtmlExport">Html export</a></li>
                <li class="breadcrumb-item active" aria-current="page">Export Conditionalformatting!</li>
            </ol>
        </nav>
    </div>
</div>
<div class="row">
    <div class="col text-center">
        <h4>Html export - Conditional Formatting</h4>
    </div>
</div>
<div class="row my-2">
    <div class="col bg-light rounded">
        <div class="row">
            <div class="col-6">
                <a href="/HtmlExport/ExportTable4">&laquo; Previous sample</a>
            </div>
            <div class="col-6 text-right">
                <a href="/HtmlExport/ExportRanges6">Next sample &raquo;</a>
            </div>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-12">
       <p>An exported range with tweakable conditional formatting in html!</p>
    </div>
</div>
<div class="row">
    <div class="col my-3">
        <ul class="nav nav-tabs">
            <li class="nav-item">
                <a class="nav-link active" href="#" id="tab-demo">Demo</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="#" id="tab-csharp">C#</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="#" id="tab-html">Html</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="#" id="tab-css">Css</a>
            </li>
        </ul>
    </div>
</div>
<form asp-action="ExportRange8" method="post" id="form52">
    @Html.AntiForgeryToken()
    <input type="hidden" id="active-rule" name="ActiveRule" value="AllCells" style="display: none;">
    <input type="hidden" id="rule-type" name="FormatStyle" style="display: none;">
    <input type="hidden" id="rule-type" name="RuleTypeString" style="display: none;">

    <input type="hidden" id="current-rule-type" name="CurrentRuleType" style="display: none;">

    <div class="row justify-content-center">
        <div class="col-sm-12 p-3">
            <div class="bg-light rounded p-2">
                <label>Select a Rule Type:</label>
                <div class="col-sm-12 col-md-6">
                    <div id="rule-buttons" style="border: 1px solid black;">
@*                         @foreach (var item in Model.CFRules)
                        {
                            <button class="plain" id=@item.FormatType.ToString()>>@item.ListOptionText</button>
                        } *@
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-12 col-md-6">
                        <label>Edit The Rule Description</label>
                    </div>
                </div>
                <label style="text-align: center" id="rule-type-format-label">Format only cells with:</label>
                <div class="row" style="justify-content: left; margin:auto; flex: 1;">
                    <div class="col-sm-12 col-md-6">
                        <div class="form-group" style= "display: flex; flex-direction: row; align-items: center;">
                            <select class="form-control" id="format-style" name= "FormatStyle">
                            </select>
                            <select class="form-control"  id="dropdown-dependent" name= "selectedEnums[1]">
                            </select>
                            <input class="form-control" value= "@Model.Formula1" type="text" id="formula-field1" name = "Formula1">
                            <input type="checkbox" id="percent-checkbox" style="display: none; margin:5px;" name="Checkbox" onchange="this.value=this.checked">
                            <label style="margin:5px;" id="content-label">and</label>
                            <input class="form-control" value= "@Model.Formula2" type="text" id="formula-field2" name = "Formula2">
                            <input type="text" id="debug-type-node" name="CurrentRuleTypeStr" value="CellContains" style="display: none;">
                        </div>
                    </div>
                    <div class="col-sm-12 col-md-6" style="display: none" id="formula-error">
     @*                    <text class="form-control" style="background-color: darkred; color: white;">
                            Faulty Formula. Error: @Model.ErrorMessage
                        </text> *@
                    </div>
                </div>
                <div class="row" style="justify-content: left; margin:auto; flex: 1;">
                    <div class="col-sm-12 col-md-6" id="tvc1">
                    </div>
                    <div class="col-sm-12 col-md-6" id="tvc2">
                    </div>
                    <div class="col-sm-12 col-md-6" id="tvc3">
                    </div>
                </div>
                <div class="row" style="justify-content: left; margin:auto; flex: 1;">
                    <div class="col-sm-12 col-md-6" id="db1">
                    </div>
                    <div class="col-sm-12 col-md-6" id="db2">
                    </div>
                    <div class="col-sm-12 col-md-6" id="db3">
                    </div>
                </div>
                <div class="form-group">
                    <label>Format</label>
                    <label>Fill Colors</label>
                    <select class="form-control" id="dropdown-color" name="ActiveColor">
                        @foreach (var item in Model.GetColValues())
                        {
                            <option value="@item">@item</option>   
                        }
                    </select>
                </div>
                <div class="form-group mt-2 row" style="margin: auto; flex: 1">
                    <button type="submit" class="btn btn-sm btn-primary float-right" id="btn-submit-form">Reload</button>
                </div>
            </div>
            <div class="row demo">
                <div class="col p-3 table-responsive">
                    @Html.Raw(Model.Html)
                </div>
            </div>
        </div>
    </div>
</form>

<div class="row csharp" style="display:none">
    <div class="col">
        <pre>
            <code class="language-csharp hljs">
            </code>
        </pre>
    </div>
</div>
<div class="row demo">
    <div class="col">
        <a href="/HtmlExport/GetWorkbookSample5" class="btn btn-secondary">Get the workbook</a>
    </div>
</div>
<div class="row html" style="display:none">
    <div class="col">
        <p>Html as it was exported</p>
        <pre style="white-space: pre-wrap">
        <code class="language-html hljs" id="html-code">
 @Model.Html.Trim()
            </code>
        </pre>
    </div>
</div>
<div class="row css" style="display:none">
    <div class="col table-responsive">
        <pre style="white-space: pre-wrap">
        <code class="language-css hljs" id="css-code">
 @Model.Css.Trim()
            </code>
        </pre>
    </div>
</div>
<script type="text/javascript">
     document.addEventListener("DOMContentLoaded", function () {

        $("#form52").on("keypress", function (event) { 
            let key = event.keyCode || event.which; 
            if (key === 13) { 
                event.preventDefault(); 
                return false; 
            } 
        }); 

        var wholeCollection = JSON.parse('@Html.Raw(Model.JsonData)');

        var jsonData = wholeCollection.Types;

        jsonData.forEach((element) => {
            $("#rule-buttons").append(
                ('<button class="plain" id='+ element.FormatName +'>>' + element.ListOptionText + '</button>')
            );
        });

        var AllCells = jsonData[0];
        var CellContains = jsonData[1];
        var Ranked = jsonData[2];
        var Average = jsonData[3];
        var UniqueDuplicates = jsonData[4];
        var CustomExpression = jsonData[5];

        var ActiveRule = jsonData[wholeCollection.ActiveIndex];

        jQuery("#btn-submit-form").click(function (e) {
            e.preventDefault();

            // jQuery("#active-rule").val(JSON.stringify(ActiveRule));
            // jQuery("#current-rule-type").val(ActiveRule.RuleCategory);
            // jQuery("#rule-type").val(ActiveRule.DropDown.Selected);
            // jQuery("#rule-type-string").val(ActiveRule.DropDown.SelectedName);

            jQuery("#form52").submit();
        });

        jQuery(".plain").click(function (e) {
        e.preventDefault();
        });

        var ColValues = JSON.parse('@Html.Raw(Model.GetColValuesString())');

        let test = Array.from($("#dropdown-color"));

        var x = document.getElementById("dropdown-color");

        for (i = 0; i < x.length; i++) {
            if(x.options[i].text == '@Model.ActiveColor')
            {
                $('#dropdown-color').append('<option value=' + x.options[i].text + ' selected= "selected"' + '>' + x.options[i].text + '</option>');
                x.options[i].remove();
                break;
            }
        }

         const CreateInputField = function (id, parentNode, databaseName) {
             let html = '<input class="form-control" type="text" id="'+ id +'" name = "'+ databaseName +'">';
             parentNode.append(html);
         }

         const CreateDropDown = function (id, parentNode, databaseName) {

             let dropdown = '<select class="form-control" id='+ id +'name='+ databaseName +'></select>'
             parentNode.append(dropdown);
         };

        const UpdateDropDown = function (aDropDown, names, selectedName, enumValues) {

            aDropDown.empty();

            for (let i = 0; i < names.length; i++) { 
                let selected = "";
                if (names[i] == selectedName) {
                    selected = ' selected= "selected"';
                }

                let html = '<option value=' + enumValues[i] + selected + '>' + names[i] + '</option>';
                aDropDown.append(html);
            }
        };

        const UpdateDropDownNameOnly = function (aDropDown, names, selectedName) {
                names.forEach((element) => {
                let selected = "";
                if (element == selectedName) {
                    selected = ' selected= "selected"';
                }

                let html = '<option value=' + element + selected + '>' + element + '</option>';
                aDropDown.append(html);
            });
        }

        const UpdateFormatStyle = function () {
            $("#content-label").text(ActiveRule.ContentLabel);
            $("#content-label").show();

            if (ActiveRule.DropDown != null) {

                $("#dropdown-dependent").empty();
                $("#dropdown-dependent").hide();

                $("#format-style").show();

                UpdateDropDown($("#format-style"), ActiveRule.DropDown.Names, ActiveRule.DropDown.SelectedName, ActiveRule.DropDown.EnumValues);
                
                // let names = ActiveRule.DropDown.Names;

                // names.forEach((element) => {
                //     let selected = "";
                //     if (element == ActiveRule.DropDown.SelectedName) {
                //         selected = ' selected= "selected"';
                //     }

                //     let html = '<option value=' + element + selected + '>' + element + '</option>';
                //     $("#format-style").append(html);
                // });

            }

            $("#format-style").change();
            // else
            // {
            //     $("#format-style").hide();
            //     $("#dropdown-dependent").hide();
            // }
        }

         const CreateTypeColor= function (id, parentNode, databaseName, title, input)
         {
            parentNode.append('<label>' + title + '\n' + '</label>');

            let testnode = parentNode.append('<div></div>');

            testnode.append('<label>Type</label>');
            CreateDropDown(id + "dropDown ", testnode, databaseName + "dropDown ");

            let testId = $("#" + id + "dropDown");

            UpdateDropDown(testId, input.Names, input.SelectedName, input.EnumValues)

            parentNode.append('<label>Color</label>');
            CreateDropDown(id + "color ", parentNode, databaseName + "color ");
         }

         const CreateTypeValue= function (id, parentNode, databaseName, title, input)
         {
            parentNode.append('<label>' + title + '\n' + '</label>');

            let testnode = parentNode.append('<div></div>');

            testnode.append('<label>Type</label>');
            CreateDropDown(id + "dropDown ", testnode, databaseName + "dropDown ");

            let testId = $("#" + id + "dropDown");

            UpdateDropDown(testId, input.Names, input.SelectedName, input.EnumValues)

            parentNode.append('<label>Value</label>');
            CreateInputField(id + "formula ", parentNode, databaseName + "formula ");
         }

        
        const CreateTypeValueColor = function (id, parentNode, databaseName, title, input) {
            CreateTypeValue(id, parentNode, databaseName, title, input);

            parentNode.append('<label>Color</label>');
            CreateDropDown(id + "color ", parentNode, databaseName + "color ");
            UpdateDropDownNameOnly($("#" + id + "color"), ColValues, ColValues[0]);
        };

        $("#AllCells").click(function (e) {
            ActiveRule = AllCells;
            $("#formula-field1").hide();
            $("#formula-field2").hide();

            let colorScale2 = ActiveRule.Types["Two_Color_Scale"];

            CreateTypeValueColor("minimumTVC", $("#tvc1"), "minimum", "Minimum", colorScale2.Minimum);
            CreateTypeValueColor("maximumTVC", $("#tvc2"), "maximum", "Maximum", colorScale2.Maximum);

            UpdateFormatStyle();
            $("#content-label").hide();
        });
        $("#CellContains").click(function (e) {
            $("#debug-type-node").attr("value", "CellContains");
            ActiveRule = CellContains;

            $("#formula-field1").show();
            $("#percent-checkbox").hide();

            let keys = Object.keys(CellContains.DropDownDict);
            UpdateDropDownNamesOnly($("#format-style"), keys, keys[0]);

            UpdateFormatStyle();
            $("#format-style").show();
        });
        $("#Ranked").click(function (e) {
            $("#debug-type-node").attr("value", "Ranked");
            ActiveRule = Ranked;

            $("#formula-field1").show();

            $("#percent-checkbox").show();
            let checkBoxResult = '@(Model.Checkbox != null ? Model.Checkbox : false)';
            $("#percent-checkbox").prop('checked', checkBoxResult == 'True');
            $("#percent-checkbox").change();

            $("#formula-field2").hide();
                
            UpdateFormatStyle();
        });
        $("#Average").click(function (e) {
            $("#debug-type-node").attr("value", "Average");
            ActiveRule = Average;

            $("#formula-field1").hide();
            $("#formula-field2").hide();
            $("#percent-checkbox").hide();
                
            UpdateFormatStyle();
        });
        $("#UniqueDuplicates").click(function (e) {
            $("#debug-type-node").attr("value", "UniqueDuplicates");
            ActiveRule = UniqueDuplicates;

            $("#formula-field1").hide();
            $("#formula-field2").hide();
            $("#percent-checkbox").hide();
                
            UpdateFormatStyle();
        });
        $("#CustomExpression").click(function (e) {
            $("#debug-type-node").attr("value", "CustomExpression");
            ActiveRule = CustomExpression;

            $("#formula-field1").show();
            $("#formula-field2").hide();
            $("#percent-checkbox").hide();
            UpdateFormatStyle();

            //28 is Expression in the cf enum.
            $("#rule-type").val(28);
            $("#format-style").hide();
        });

        $("#format-style").change(function () {

            if (ActiveRule == CellContains) {

                let CellContainsElement = ActiveRule.DropDownDict[$(this).val()];

                if ((CellContainsElement.SelectedName != undefined) || ($(this).val() == "Cell_Value")) {
                    $("#dropdown-dependent").show();

                    if ($(this).val() == "Cell_Value") {
                        let keys = Object.keys(CellContainsElement);
                        UpdateDropDownNamesOnly($("#dropdown-dependent"), keys, keys[0]);
                    }
                    else {
                        UpdateDropDownNamesOnly($("#dropdown-dependent"), CellContainsElement.Names, CellContainsElement.SelectedName);
                    }

                    ActiveRule.CurrentType = $(this).val();
                }
                else { 
                    $("#dropdown-dependent").empty();
                    $("#dropdown-dependent").hide();
                }

                if (($(this).val() == "Cell_Value") || ($(this).val() == "Specific_Text")) { 
                    $("#formula-field1").show();
                }
                else
                {
                    $("#formula-field1").hide();
                }

                $("#dropdown-dependent").change();
            }
            else { 
                $("#dropdown-dependent").hide();
            }

            if (ActiveRule == AllCells) {
                $("#tvc1").empty();
                $("#tvc2").empty();
                $("#tvc3").empty();

                $("#percent-checkbox").hide();
                $("#content-label").hide();

                let advancedType = ActiveRule.Types[$(this).val()];

                if ($(this).val() == "Three_Color_Scale") {
                    CreateTypeValueColor("minimumTVC", $("#tvc1"), "minimum", "Minimum", advancedType.Minimum);
                    CreateTypeValueColor("midpointTVC", $("#tvc2"), "midpoint", "Midpoint", advancedType.Midpoint);
                    CreateTypeValueColor("maximumTVC", $("#tvc3"), "maximum", "Maximum", advancedType.Maximum);
                }
                else if ($(this).val() == "Two_Color_Scale") {
                    CreateTypeValueColor("minimumTVC", $("#tvc1"), "minimum", "Minimum", advancedType.Minimum);
                    CreateTypeValueColor("maximumTVC", $("#tvc2"), "maximum", "Maximum", advancedType.Maximum);
                }
                else { 
                    $("#percent-checkbox").show();
                    $("#content-label").show();
                    CreateTypeValue("minimumTVC", $("#tvc1"), "minimum", "Minimum", advancedType.Minimum);
                    CreateTypeValue("maximumTVC", $("#tvc2"), "maximum", "Maximum", advancedType.Maximum);

                    CreateTypeColor("pos-fill", $("#db1"), "PosFill", "Fill", advancedType.PositiveFill);
                    CreateTypeColor("border-color", $("#db2"), "BorderColor", "Border", advancedType.PositiveBorderFill);
                    CreateDropDown("bar-direction", $("#db3"), "dbContext");
                    CreateTypeColor("axis-color", $("#db3"), "AxisColor", "Axis Settings", advancedType.Axis);


                    // CreateTypeColor("NegFill", $("#db1"), "NegFill", "Negative Fill", advancedType.NegativeFill);


                }
            }



            //let dropListOptions = ActiveRule.DropDown.Names;

            // let name = $(this).val();

            // if ((ActiveRule == CellContains && ((name == "Cell_Value") || (name == "Specific_Text")))) {
            //     $("#formula-field1").show();
            // }
            // else if (ActiveRule == CellContains) {
            //     $("#formula-field1").hide();
            // }

            // if (dropListOptions != null && dropListOptions != undefined && dropListOptions != "") {
            //     $("#dropdown-dependent").show();

            //     dropListOptions.forEach((element) => {
            //         let selected = "";
            //         if (element == ActiveRule.DropDown.SelectedName) { 
            //             selected = ' selected= "selected"';
            //         }

            //         let html = '<option value=' + element + selected + '>' + element + '</option>';
            //         $("#dropdown-dependent").append(html);
            //     });
            //     $("#dropdown-dependent").change();
            // }
            // else {
            //     $("#dropdown-dependent").change();
            //     $("#dropdown-dependent").hide();
            // }
        });

        $("#dropdown-dependent").change(function () {

            if (ActiveRule == CellContains) { 
                if(ActiveRule.CurrentType < 3)
                {
                    if (ActiveRule.CurrentType == 0) { 
                      let valRule = (ActiveRule.DropDownDict[0])[$(this).val()];

                    }
                    
                }
            }
            
            if ($(this).val() == 'Between' || $(this).val() == 'Not_Between') {
                $("#formula-field2").show();
                $("#content-label").show();
            }
            else {
                $("#formula-field2").hide();
                if (ActiveRule == CellContains) {
                    $("#content-label").hide();
                }
            }
            // if(ActiveRule == CellContains){
            //     if ($(this).val() == 'Between' || $(this).val() == 'Not_Between') {
            //         $("#formula-field2").show();
            //         $("#content-label").show();
            //     }
            //     else {
            //         $("#formula-field2").hide();
            //         if (ActiveRule == CellContains) {
            //             $("#content-label").hide();
            //         }
            //     }
            // }
        });

        $('#@Model.CurrentRuleTypeStr').click();
    });
</script>
