@model EPPlus.WebSampleMvc.NetCore.Models.HtmlExport.ExportTable2Model
@{
    ViewData["Title"] = "Html export";
}
<script type="text/javascript" src=https://www.gstatic.com/charts/loader.js></script>
<style type="text/css">
    @Html.Raw(Model.Css)
</style>
<div class="row">
    <div class="col">
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="/">Home</a></li>
                <li class="breadcrumb-item"><a href="/HtmlExport">Html export</a></li>
                <li class="breadcrumb-item active" aria-current="page">Export table with charts</li>
            </ol>
        </nav>
    </div>
</div>
<div class="row">
    <div class="col text-center">
        <h4>Html export - connect table data with external components</h4>
    </div>
</div>
<div class="row my-2">
    <div class="col bg-light rounded">
        <div class="row">
            <div class="col-6">
                <a href="/HtmlExport/ExportTable1">&laquo; Previous sample</a>
            </div>
            <div class="col-6 text-right">
                <a href="/HtmlExport/ExportTable3">Next sample &raquo;</a>
            </div>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-12">
        <div class="p-1" id="table-description">
            <p>In this sample we have connected the exported table to Google charts with javascript. The table data is imported to EPPlus via the <a href="https://github.com/EPPlusSoftware/EPPlus/wiki/LoadFromDataTable" target="_blank">LoadFromDataTable</a> function and the Density column is a calculated table column. The total row of the table is calculated via EPPlus built in Total row functions.</p>
            <p>The table has addtional classes from Bootstrap: table and table-sm</p>
        </div>
    </div>
</div>
<div class="row">
    <div class="col my-3">
        <ul class="nav nav-tabs">
            <li class="nav-item">
                <a class="nav-link active" href="#" id="tab-demo">Demo</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="#" id="tab-csharp">C#</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="#" id="tab-js">Javascript</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="#" id="tab-html">Table HTML</a>
            </li>
        </ul>
    </div>
</div>
<div class="row demo">
    <div class="col mb-3">
        <div class="dropdown">
            <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                @ViewData["TableStyle"]
            </button>
            <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                <a class="dropdown-item" href="/HtmlExport/ExportTable2?style=Dark1">Dark 1</a>
                <a class="dropdown-item" href="/HtmlExport/ExportTable2?style=Dark2">Dark 2</a>
                <a class="dropdown-item" href="/HtmlExport/ExportTable2?style=Dark3">Dark 3</a>
                <a class="dropdown-item" href="/HtmlExport/ExportTable2?style=Dark4">Dark 4</a>
                <a class="dropdown-item" href="/HtmlExport/ExportTable2?style=Dark5">Dark 5</a>
                <a class="dropdown-item" href="/HtmlExport/ExportTable2?style=Dark6">Dark 6</a>
                <a class="dropdown-item" href="/HtmlExport/ExportTable2?style=Medium1">Medium 1</a>
                <a class="dropdown-item" href="/HtmlExport/ExportTable2?style=Medium2">Medium 2</a>
                <a class="dropdown-item" href="/HtmlExport/ExportTable2?style=Medium3">Medium 3</a>
                <a class="dropdown-item" href="/HtmlExport/ExportTable2?style=Medium4">Medium 4</a>
                <a class="dropdown-item" href="/HtmlExport/ExportTable2?style=Medium5">Medium 5</a>
                <a class="dropdown-item" href="/HtmlExport/ExportTable2?style=Light1">Light 1</a>
                <a class="dropdown-item" href="/HtmlExport/ExportTable2?style=Light2">Light 2</a>
                <a class="dropdown-item" href="/HtmlExport/ExportTable2?style=Light3">Light 3</a>
                <a class="dropdown-item" href="/HtmlExport/ExportTable2?style=Light4">Light 4</a>
                <a class="dropdown-item" href="/HtmlExport/ExportTable2?style=Light5">Light 5</a>
                <a class="dropdown-item" href="/HtmlExport/ExportTable2?style=Light6">Light 6</a>
            </div>
        </div>
    </div>
</div>
<div class="row demo">
    <div class="col-sm-12 col-md-5" id="table-container">
        @Html.Raw(Model.Html)
    </div>
    <div class="col-sm-12 col-md-6">
        <div class="row">
            <div class="col border border-secondary rounded shadow p-2">
                <div id="geo-chart" style="height:300px"></div>
            </div>
        </div>
        <div class="row">
            <div class="col border border-secondary rounded shadow p-2 mt-2">
                <div id="pie-chart" style="height:300px"></div>
            </div>
        </div>
        <div class="row">
            <div class="col border border-secondary rounded shadow p-2 mt-2">
                <div id="bar-chart" style="height:300px"></div>
            </div>
        </div>
    </div>
</div>
<div class="row csharp">
    <div class="col">
        <pre>
            <code class="language-csharp hljs">
using System.Data;
using OfficeOpenXml;
using OfficeOpenXml.Style;
using OfficeOpenXml.Table;

namespace EPPlus.WebSampleMvc.NetCore.Models.HtmlExport
{
    public class ExportTable2Model
    {

        private DataTable _dataTable;

        private void InitDataTable()
        {
            _dataTable = new DataTable();
            _dataTable.Columns.Add("Country", typeof(string));
            _dataTable.Columns.Add("Population", typeof(int));
            var areaCol = _dataTable.Columns.Add("Area", typeof(int));
            areaCol.Caption = "Area (km2)";

            _dataTable.Rows.Add("Sweden", 10409248, 450295);
            _dataTable.Rows.Add("Norway", 5402171, 385178);
            _dataTable.Rows.Add("Netherlands", 17553530, 41198);
            _dataTable.Rows.Add("Finland", 5541806, 338145);
            _dataTable.Rows.Add("Belgium", 11521238, 30510);
            _dataTable.Rows.Add("Denmark", 5850189, 44493);
            _dataTable.Rows.Add("Lithuania", 2801264, 65300);
            _dataTable.Rows.Add("Greece", 10718565, 131940);
            _dataTable.Rows.Add("Russia", 145734038, 3972400);
            _dataTable.Rows.Add("Germany", 83124418, 357386);
            _dataTable.Rows.Add("France", 64990511, 551695);
            _dataTable.Rows.Add("Czech Republic", 10665677, 78866);
            _dataTable.Rows.Add("Slovakia", 5459781, 49036);
            _dataTable.Rows.Add("Spain", 47394223, 498468);
            _dataTable.Rows.Add("Portugal", 10256193, 91568);
            _dataTable.Rows.Add("United Kingdom", 67141684, 242495);
            _dataTable.Rows.Add("Poland", 37921592, 312685);
            _dataTable.Rows.Add("Albania", 2882740, 28748);
            _dataTable.Rows.Add("Estonia", 1322920, 45339);
            _dataTable.Rows.Add("Hungary", 9707499, 93030);
            _dataTable.Rows.Add("Romania", 19186000, 238397);
            _dataTable.Rows.Add("Italy", 60627291, 301338);
            _dataTable.Rows.Add("Bulgaria", 7051608, 110994);
            _dataTable.Rows.Add("Belarus", 9452617, 207600);
            _dataTable.Rows.Add("Austria", 8891388, 83858);
            _dataTable.Rows.Add("Switzerland", 8525611, 41290);
            _dataTable.Rows.Add("Ireland", 4818690, 70273);
            _dataTable.Rows.Add("Ukraine", 44246156, 603628);
            _dataTable.Rows.Add("Iceland", 336713, 102775);
            _dataTable.Rows.Add("Serbia", 6871547, 77453);
            _dataTable.Rows.Add("Croatia", 4156405, 56594);
            _dataTable.Rows.Add("Latvia", 1928459, 64589);
            _dataTable.Rows.Add("Bosnia and Herzegovina", 3323925, 51129);
            _dataTable.Rows.Add("Montenegro", 627809, 13812);
            _dataTable.Rows.Add("Cyrprus", 1189265, 9251);
            _dataTable.Rows.Add("Kosovo", 1798506, 10908);
            _dataTable.Rows.Add("Slovenia", 2055496, 20273);
            _dataTable.Rows.Add("Moldova", 4033963, 33846);
            _dataTable.Rows.Add("North Macedonia", 2083374, 25713);

        }

        public void SetupSampleData(TableStyles style = TableStyles.Dark1)
        {
            InitDataTable();
            using(var package = new ExcelPackage())
            {
                var sheet = package.Workbook.Worksheets.Add("Html export sample 2");
                var tableRange = sheet.Cells["A1"].LoadFromDataTable(_dataTable, true, style);
                
                // configure the table
                var table = sheet.Tables.GetFromRange(tableRange);
                table.Sort(x => x.SortBy.ColumnNamed("Population", eSortOrder.Descending));
                table.ShowTotal = true;
                table.Columns[0].TotalsRowLabel = "Total";
                table.Columns[1].TotalsRowFunction = RowFunctions.Sum;
                table.Columns[2].TotalsRowFunction = RowFunctions.Sum;
                
                // add column for population density
                table.Columns.Add(1);
                tableRange = table.Range;
                table.Columns[3].CalculatedColumnFormula = $"{table.Name}[[#This Row],[Population]]/{table.Name}[[#This Row],[Area (km2)]]";
                table.Columns[3].Name = "Density";
                table.Columns[3].TotalsRowFunction = RowFunctions.Average;
                sheet.Calculate();

                // format the header
                sheet.Cells[1, tableRange.Start.Column + 1, 1, tableRange.End.Column].Style.HorizontalAlignment = ExcelHorizontalAlignment.Right;

                // format the rows
                var lastDataRow = tableRange.End.Row - 1;
                sheet.Cells[tableRange.Start.Row, 1, lastDataRow, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                sheet.Cells[tableRange.Start.Row, 2, lastDataRow, 2].Style.Numberformat.Format = "#,##0";
                sheet.Cells[tableRange.Start.Row, 3, lastDataRow, 3].Style.Numberformat.Format = "#,##0 \"km2\"";
                sheet.Cells[tableRange.Start.Row, 4, lastDataRow, 4].Style.Numberformat.Format = "#,##0.0";

                // format the total row
                var totalRow = tableRange.End.Row;
                sheet.Cells[totalRow, 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                sheet.Cells[totalRow, 2].Style.Numberformat.Format = "#,##0";
                sheet.Cells[totalRow, 3].Style.Numberformat.Format = "#,##0 \"km2\"";
                sheet.Cells[totalRow, 4].Style.Numberformat.Format = "\"Avg: \"#,##0.0 ";


                // Configure export settings
                var settings = table.HtmlExporter.Settings;
                settings.Minify = false;
                settings.AdditionalTableClassNames.Add("table");
                settings.AdditionalTableClassNames.Add("table-sm");
                settings.TableId = "population-table";
                settings.Accessibility.TableSettings.AriaDescribedBy = "table-description";
                settings.Accessibility.TableSettings.AriaLabel = "Demo table";

                // export css and html
                Css = table.HtmlExporter.GetCssString();
                Html = table.HtmlExporter.GetHtmlString();
            }
        }

        public string Css { get; set; }

        public string Html { get; set; }
    }
}


            </code>
        </pre>
    </div>
</div>
<div class="row js">
    <div class="col">
        <pre>
            <code class="language-js hljs" id="js-code"></code>
        </pre>
    </div>
</div>
<div class="row html">
    <div class="col">
        <pre style="white-space: pre-wrap">
            <code class="language-html hljs" id="html-code">
 @Model.Html.Trim()
            </code>
        </pre>
    </div>
</div>
<script type="text/javascript" id="chart-script">

    // Load the Visualization API and the corechart package.
    google.charts.load('current', { 'packages': ['corechart', 'geochart'] });

    // Set a callback to run when the Google Visualization API is loaded.
    google.charts.setOnLoadCallback(drawCharts);


    function getDataFromTable(indexes) {
        // Create the data table.
        var data = new google.visualization.DataTable();
        var dataTypes = [];
        var n = 0;

        // read data types from the thead and define columns in the google.visualization.DataTable
        $("table#population-table thead tr th").each(function (i, elem) {
            if (indexes.includes(i)) {
                var dt = $(elem).data("datatype");
                dataTypes[n++] = dt;
                data.addColumn(dt, elem.innerHTML);
            }
        });

        // read the data from the tbody and insert it into the table
        let rows = [];
        $("table#population-table tbody tr").each(function (i, tableRow) {
            var row = [];
            var colIx = 0;
            indexes.forEach(ix => {
                let dataType = dataTypes[colIx++];
                var cell = $(tableRow).children().eq(ix);
                if (dataType == "string") {
                    row.push($(cell).html());
                }
                else if (dataType == "number") {
                    row.push(parseFloat($(cell).data("value")));
                }
                else if (dataType == "datetime") {
                    row.push(new Date(parseFloat($(cell).data("value"))));
                }
            });
            rows.push(row);
        });
        data.addRows(rows);
        return data;
    }

    // Callback that creates and populates a data table,
    // instantiates the pie chart, passes in the data and
    // draws it.
    function drawCharts() {
        var dt = getDataFromTable([0, 1, 3]);
        drawGeoChart(dt);
        var dt2 = getDataFromTable([0, 1]);
        drawPieChart(dt2, "Population in Europe");
        var dt3 = getDataFromTable([0, 3]);
        drawBarChart(dt3, "Population density in Europe");
    }

    function drawGeoChart(data) {
        
        // Set chart options
        var options = {
            'title': 'Population in some countries',
            'width': 500,
            'height': 300,
            'is3D': true,
            'region': 150
        };
        var chart3 = new google.visualization.GeoChart(document.getElementById('geo-chart'));
        chart3.draw(data, options);
    }

    function drawPieChart(data, title){
        var options = {
            'title': title,
            'width': 500,
            'height': 300,
            'is3D': true
        };
        // Instantiate and draw our chart, passing in some options.
        var chart = new google.visualization.PieChart(document.getElementById('pie-chart'));
        chart.draw(data, options);
    }

    function drawBarChart(data, title){
        var options = {
            'title': title,
            'width': 500,
            'height': 300,
            'is3D': true
        };
        var chart2 = new google.visualization.BarChart(document.getElementById('bar-chart'));
        chart2.draw(data, options);
    }
</script>
<script type="text/javascript">
    document.addEventListener("DOMContentLoaded", function () {
        jQuery(".csharp").hide();
        jQuery(".js").hide();
        jQuery(".html").hide();
        jQuery("#js-code").html(jQuery("#chart-script").html());
        //let html = new DOMParser().parseFromString(jQuery("#table-container").innerHTML, "text/html").documentElement.textContent;
        //jQuery("#html-code").html(html);
        hljs.highlightAll();
        jQuery("#tab-csharp").click(function (e) {
            e.preventDefault();
            jQuery(".demo").hide();
            jQuery(".csharp").show();
            jQuery(".js").hide();
            jQuery(".html").hide();
            jQuery("#tab-demo").removeClass("active");
            jQuery("#tab-csharp").addClass("active");
            jQuery("#tab-js").removeClass("active");
            jQuery("#tab-html").removeClass("active");
        });
        jQuery("#tab-demo").click(function (e) {
            e.preventDefault();
            jQuery(".demo").show();
            jQuery(".csharp").hide();
            jQuery(".js").hide();
            jQuery(".html").hide();
            jQuery("#tab-demo").addClass("active");
            jQuery("#tab-csharp").removeClass("active");
            jQuery("#tab-js").removeClass("active");
            jQuery("#tab-html").removeClass("active");
        });
        jQuery("#tab-js").click(function (e) {
            e.preventDefault();
            jQuery(".demo").hide();
            jQuery(".csharp").hide();
            jQuery(".js").show();
            jQuery(".html").hide();
            jQuery("#tab-demo").removeClass("active");
            jQuery("#tab-csharp").removeClass("active");
            jQuery("#tab-js").addClass("active");
            jQuery("#tab-html").removeClass("active");
        });
        jQuery("#tab-html").click(function (e) {
            e.preventDefault();
            jQuery(".demo").hide();
            jQuery(".csharp").hide();
            jQuery(".js").hide();
            jQuery(".html").show();
            jQuery("#tab-demo").removeClass("active");
            jQuery("#tab-csharp").removeClass("active");
            jQuery("#tab-js").removeClass("active");
            jQuery("#tab-html").addClass("active");
        });
    });
</script>

