@model EPPlus.WebSampleMvc.NetCore.Models.HtmlExport.ExportRange7Model
<style type="text/css">
    @Html.Raw(Model.Css)
    button.plain { background:none; border: thin solid 1pt; width: 100%; border-bottom: thin; border-color:black; text-align:left;}
    button:hover { background-color:cornflowerblue;}
    button:focus { background-color:deepskyblue;}
</style>
<div class="row">
    <div class="col">
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="/">Home</a></li>
                <li class="breadcrumb-item"><a href="/HtmlExport">Html export</a></li>
                <li class="breadcrumb-item active" aria-current="page">Export Conditionalformatting!</li>
            </ol>
        </nav>
    </div>
</div>
<div class="row">
    <div class="col text-center">
        <h4>Html export - Conditional Formatting</h4>
    </div>
</div>
<div class="row my-2">
    <div class="col bg-light rounded">
        <div class="row">
            <div class="col-6">
                <a href="/HtmlExport/ExportTable4">&laquo; Previous sample</a>
            </div>
            <div class="col-6 text-right">
                <a href="/HtmlExport/ExportRanges6">Next sample &raquo;</a>
            </div>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-12">
       <p>An exported range with tweakable conditional formatting in html!</p>
    </div>
</div>
<div class="row">
    <div class="col my-3">
        <ul class="nav nav-tabs">
            <li class="nav-item">
                <a class="nav-link active" href="#" id="tab-demo">Demo</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="#" id="tab-csharp">C#</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="#" id="tab-html">Html</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="#" id="tab-css">Css</a>
            </li>
        </ul>
    </div>
</div>
<form asp-action="ExportRange7" method="post" id="form42">
    @Html.AntiForgeryToken()
    <div class="row justify-content-center">
        <div class="col-sm-12 p-3">
            <div class="bg-light rounded p-2">
                <label>Select a Rule Type:</label>
                <div class="col-sm-12 col-md-6">
                    <div style="border: 1px solid black;">
                        @foreach (var item in Model.CFRules)
                        {
                            <button class="plain" id=@item.FormatType.ToString()>>@item.ListOptionText</button>
                        }
                    </div>
                </div>
                <div class="row">
                    <div class="col-sm-12 col-md-6">
                        <label>Edit The Rule Description</label>
                    </div>
                </div>
                <label style="text-align: center" id="rule-type-format-label">Format only cells with:</label>
                <div class="row" style="justify-content: left; margin:auto; flex: 1;">
                    <div class="col-sm-12 col-md-6">
                        <div class="form-group" style= "display: flex; flex-direction: row; align-items: center;">
                            <select class="form-control" id="format-style" name= "selectedEnums[0]">
                                @foreach (var item in Model.GetEnumValues())
                                {
                                    <option value="@item">@item</option>   
                                }
                            </select>
                            <select class="form-control"  id="dropdown-dependent" name= "selectedEnums[1]">
                                @foreach (var item in Model.GetEnumValuesDependent())
                                {
                                    <option value="@item">@item</option>
                                }
                            </select>
                            <input class="form-control" value= "@Model.Formula1" type="text" id="formula-field1" name = "Formula1">
                            <label id="content-label">and</label>
                            <input class="form-control" value= "@Model.Formula2" type="text" id="formula-field2" name = "Formula2">
                            <input type="checkbox" id="percent-checkbox" style="display: none;" name="Checkbox" value="false" onchange="this.value=this.checked">
                            <input type="text" id="debug-type-node" name="CurrentRuleTypeStr" value="CellContains" style="display: none;">
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    <label>Format</label>
                    <label>Fill Colors</label>
                    <select class="form-control" id="dropdown-color" name="AppliedColor">
                        @foreach (var item in Model.GetColValues())
                        {
                            <option value="@item">@item</option>   
                        }
                    </select>
                </div>
                <div class="form-group mt-2 row" style="margin: auto; flex: 1">
                    <button type="submit" class="btn btn-sm btn-primary float-right" id="btn-submit-form">Reload</button>
                </div>
            </div>
            <div class="row demo">
                <div class="col p-3 table-responsive">
                    @Html.Raw(Model.Html)
                </div>
            </div>
        </div>
    </div>
</form>

<div class="row csharp" style="display:none">
    <div class="col">
        <pre>
            <code class="language-csharp hljs">
            </code>
        </pre>
    </div>
</div>
<div class="row demo">
    <div class="col">
        <a href="/HtmlExport/GetWorkbookSample5" class="btn btn-secondary">Get the workbook</a>
    </div>
</div>
<div class="row html" style="display:none">
    <div class="col">
        <p>Html as it was exported</p>
        <pre style="white-space: pre-wrap">
        <code class="language-html hljs" id="html-code">
 @Model.Html.Trim()
            </code>
        </pre>
    </div>
</div>
<div class="row css" style="display:none">
    <div class="col table-responsive">
        <pre style="white-space: pre-wrap">
        <code class="language-css hljs" id="css-code">
 @Model.Css.Trim()
            </code>
        </pre>
    </div>
</div>
<script type="text/javascript">
     document.addEventListener("DOMContentLoaded", function () {

        jQuery(".plain").click(function (e) {
                e.preventDefault();
        });
        jQuery("#btn-submit-form").click(function (e) {
            e.preventDefault();
            jQuery("#form42").submit();
        });
         // jQuery("#debug-type-node").change(function (e) {
         //     if($(this).is(":checked"))
         //     $(this).attr("checked",$(this).is(":checked"))
         // });

        //var jsonData = JSON.parse('@Html.Raw(Model.JsonData)');
        var jsonData = JSON.parse('@Html.Raw(Model.JsonData)');

        var CellContains = jsonData[0];
        var Ranked = jsonData[1];

        var ActiveRule = jsonData[0];

        const UpdateFormatStyle = function () {
            $("#format-style").empty();

            $("#content-label").text(ActiveRule.ContentLabel);

            let keys = Object.keys(ActiveRule.Collection.Dict);

            keys.forEach((element) => {
                let html = '<option value=' + element + '>' + element + '</option>';
                $("#format-style").append(html);
            });

            $("#format-style").change();
        }

        $("#AllCells").click(function (e) {
        });
        $("#CellContains").click(function (e) {
            $("#debug-type-node").attr("value", "CellContains");
            ActiveRule = CellContains;

            $("percent-checkbox").hide();

            UpdateFormatStyle();
        });
        $("#Ranked").click(function (e) {
            $("#debug-type-node").attr("value", "Ranked");
            ActiveRule = Ranked;

            $("#percent-checkbox").show();
            $("#formula-field2").hide();
                
            UpdateFormatStyle();
        });
        $("#Average").click(function (e) {
        });
        $("#UniqueDuplicates").click(function (e) {
        });
        $("#CustomExpression").click(function (e) {
        });

        $("#format-style").change( function () {

            let dropListOptions = ActiveRule.Collection.Dict[$(this).val()];

            $("#dropdown-dependent").empty();

            if (dropListOptions != null && dropListOptions != undefined && dropListOptions != "") {
                $("#dropdown-dependent").show();

                dropListOptions.forEach((element) => {
                    let html = '<option value=' + element + '>' + element + '</option>';
                    $("#dropdown-dependent").append(html);
                });
                $("#dropdown-dependent").change();
            }
            else {
                $("#dropdown-dependent").hide();
            }
        });

        $("#dropdown-dependent").change(function () {

            $("#formula-field1").show();

            if ($(this).val() == 'Between' || $(this).val() == 'Not_Between') {
                $("#formula-field2").show();
                $("#content-label").show();
            }
            else {
                $("#formula-field2").hide();
                $("#content-label").hide();
            }
        });
    });
</script>
